*** deliver.c.orig	Thu May  5 20:40:23 1988
--- deliver.c	Fri Sep 23 19:56:56 1988
***************
*** 28,33 ****
--- 28,85 ----
  #include <resolv.h>
  
  /*
+ **  Status error messages
+ */
+ #define MAXENDERR	(sizeof(Enderr) / sizeof(*Enderr))
+ char *Enderr[] = {
+ 	"IMPOSSIBLE",
+ 	/* SIGHUP */	"hangup",
+ 	/* SIGINT */	"interrupt",
+ 	/* SIGQUIT */	"quit",
+ 	/* SIGILL */	"illegal instruction",
+ 	/* SIGTRAP */	"trace trap",
+ 	/* SIGIOT */	"IOT instruction",
+ 	/* SIGEMT */	"EMT instruction",
+ 	/* SIGFPE */	"floating point exception",
+ 	/* SIGKILL */	"kill",
+ 	/* SIGBUS */	"bus error",
+ 	/* SIGSEGV */	"segmentation violation",
+ 	/* SIGSYS */	"bad argument to system call",
+ 	/* SIGPIPE */	"write on a pipe with no one to read it",
+ 	/* SIGALRM */	"alarm clock",
+ 	/* SIGTERM */	"software termination signal",
+ 	/* SIGURG */	"urgent condition present on socket",
+ 	/* SIGSTOP */	"stop",
+ 	/* SIGTSTP */	"stop signal generated from keyboard",
+ 	/* SIGCONT */	"continue after stop",
+ 	/* SIGCHLD */	 "child status has changed",
+ 	/* SIGTTIN */	"background read attempted from control terminal",
+ 	/* SIGTTOU */	"background write attempted to control terminal",
+ 	/* SIGIO */	"I/O is possible on a descriptor",
+ 	/* SIGXCPU */	"cpu time limit exceeded",
+ 	/* SIGXFSZ */	"file size limit exceeded",
+ 	/* SIGVTALRM */	"virtual time alarm",
+ 	/* SIGPROF */	"profiling timer alarm",
+ 	/* SIGWINCH */	"window changed",
+ 	/* SIGLOST */	"resource lost",
+ 	/* SIGUSR1 */	"user-defined signal 1",
+ 	/* SIGUSR2 */	"user-defined signal 2"
+ };
+ 
+ /*
+ **  Name server error messages
+ */
+ #define MAXH_ERR		(sizeof(H_Errmsg) / sizeof(*H_Errmsg))
+ char *H_Errmsg[] = {
+ 	/* XXX */		"[Unknown error]",
+ 	/* HOST_NOT_FOUND */	"Authoritative answer from name server",
+ 	/* TRY_AGAIN */		"Non-authoritiatve answer or name server failure",
+ 	/* NO_RECOVERY */	"Non recoverable name server error",
+ 	/* NO_DATA */		"Valid name but no data [address]"
+ };
+ 
+ 
+ /*
  **  DELIVER -- Deliver a message to a list of addresses.
  **
  **	This routine delivers to everyone on the same host as the
***************
*** 131,137 ****
  
  	/* rewrite from address, using rewriting rules */
  	expand("\001f", buf, &buf[sizeof buf - 1], e);
! 	(void) strcpy(tfrombuf, remotename(buf, m, TRUE, TRUE));
  
  	define('g', tfrombuf, e);		/* translated sender address */
  	define('h', host, e);			/* to host */
--- 183,189 ----
  
  	/* rewrite from address, using rewriting rules */
  	expand("\001f", buf, &buf[sizeof buf - 1], e);
! 	(void) strcpy(tfrombuf, remotename(buf, m, TRUE, TRUE, FALSE));
  
  	define('g', tfrombuf, e);		/* translated sender address */
  	define('h', host, e);			/* to host */
***************
*** 371,377 ****
  
  	if (ctladdr == NULL)
  		ctladdr = &e->e_from;
! 	_res.options &= ~(RES_DEFNAMES | RES_DNSRCH);		/* XXX */
  #ifdef SMTP
  	if (clever) {
  		expand("\001w", buf, &buf[sizeof(buf) - 1], e);
--- 423,429 ----
  
  	if (ctladdr == NULL)
  		ctladdr = &e->e_from;
! 	/* _res.options &= ~(RES_DEFNAMES | RES_DNSRCH);		/* XXX */
  #ifdef SMTP
  	if (clever) {
  		expand("\001w", buf, &buf[sizeof(buf) - 1], e);
***************
*** 421,427 ****
  		message(Arpa_Info, "Connecting to %s (%s)...", host, m->m_name);
  		rcode = sendoff(e, m, pv, ctladdr);
  	}
! 	_res.options |= RES_DEFNAMES | RES_DNSRCH;	/* XXX */
  
  	/*
  	**  Do final status disposal.
--- 473,479 ----
  		message(Arpa_Info, "Connecting to %s (%s)...", host, m->m_name);
  		rcode = sendoff(e, m, pv, ctladdr);
  	}
! 	/* _res.options |= RES_DEFNAMES | RES_DNSRCH;	/* XXX */
  
  	/*
  	**  Do final status disposal.
***************
*** 647,653 ****
  	/* see if it died a horrid death */
  	if ((st & 0377) != 0)
  	{
! 		syserr("mailer %s died with signal %o", name, st);
  		ExitStat = EX_TEMPFAIL;
  		return (EX_TEMPFAIL);
  	}
--- 699,707 ----
  	/* see if it died a horrid death */
  	if ((st & 0377) != 0)
  	{
! 		syserr("%s died because of %s (%d)--requeueing message",
! 		       name, ((st >= 0) && (st < MAXENDERR)) ?
! 		       Enderr[st] : "unknown error code", st);
  		ExitStat = EX_TEMPFAIL;
  		return (EX_TEMPFAIL);
  	}
***************
*** 1006,1013 ****
  		message(Arpa_Info, &statmsg[4]);
  	else
  	{
  		Errors++;
! 		usrerr(statmsg);
  	}
  
  	/*
--- 1060,1073 ----
  		message(Arpa_Info, &statmsg[4]);
  	else
  	{
+ 		extern char Arpa_Usrerr[];
+ 
  		Errors++;
! 		if (stat == EX_NOHOST && h_errno != 0)
! 			usrerr("%s (%s)", statmsg,
! 				H_Errmsg[h_errno > MAXH_ERR ? 0 : h_errno]);
! 		else
! 			usrerr(statmsg);
  	}
  
  	/*
***************
*** 1079,1110 ****
  	register FILE *fp;
  	register MAILER *m;
  {
! 	char *template = "\001l\n";
  	char buf[MAXLINE];
  
  	if (bitnset(M_NHDR, m->m_flags))
  		return;
  
  # ifdef UGLYUUCP
  	if (bitnset(M_UGLYUUCP, m->m_flags))
  	{
  		char *bang;
- 		char xbuf[MAXLINE];
  
  		expand("\001g", buf, &buf[sizeof buf - 1], CurEnv);
  		bang = index(buf, '!');
  		if (bang == NULL)
! 			syserr("No ! in UUCP! (%s)", buf);
  		else
  		{
  			*bang++ = '\0';
! 			(void) sprintf(xbuf, "From %s  \001d remote from %s\n", bang, buf);
! 			template = xbuf;
  		}
  	}
  # endif UGLYUUCP
  	expand(template, buf, &buf[sizeof buf - 1], CurEnv);
  	putline(buf, fp, m);
  }
  /*
  **  PUTBODY -- put the body of a message.
--- 1139,1192 ----
  	register FILE *fp;
  	register MAILER *m;
  {
! 	extern char *macvalue();
! 	char *oldg = macvalue('g', CurEnv);
! 	char template[MAXLINE];
! 	char newg[MAXLINE];
  	char buf[MAXLINE];
  
+ 	strcpy(template, "\001l\n");
+ 
  	if (bitnset(M_NHDR, m->m_flags))
  		return;
  
+ 	/* construct path through us if needed */
+ 	if (bitnset(M_FROMPATH, m->m_flags)) {
+ 		char myname[MAXLINE];
+ 
+ 		expand("\001k", myname, &myname[sizeof myname - 1], CurEnv);
+ 		if (index(oldg, '!') == NULL
+ 		    || strncmp(oldg, myname, strlen(myname)) != 0) {
+ 			sprintf(newg, "%s!%s", myname, oldg);
+ 			define('g', newg, CurEnv);
+ 		}
+ 	}
+ 
  # ifdef UGLYUUCP
  	if (bitnset(M_UGLYUUCP, m->m_flags))
  	{
  		char *bang;
  
  		expand("\001g", buf, &buf[sizeof buf - 1], CurEnv);
  		bang = index(buf, '!');
  		if (bang == NULL)
! 			syserr("No `!' in UUCP envelope \"from\" address! (%s)",
! 			       buf);
  		else
  		{
  			*bang++ = '\0';
! 			(void) sprintf(template,
! 				       "From %s  \001d remote from %s\n",
! 				       bang, buf);
  		}
  	}
  # endif UGLYUUCP
  	expand(template, buf, &buf[sizeof buf - 1], CurEnv);
  	putline(buf, fp, m);
+ 
+ 	/* redefine old from address */
+ 	if (bitnset(M_FROMPATH, m->m_flags))
+ 		define('g', oldg, CurEnv);
  }
  /*
  **  PUTBODY -- put the body of a message.
